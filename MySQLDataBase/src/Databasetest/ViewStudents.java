/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Databasetest;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.*; // Import for database connection
import javax.swing.table.DefaultTableModel; // Import for JTable model
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Caryd Ramos
 */
public class ViewStudents extends javax.swing.JFrame {

    /**
     * Creates new form ViewStudents
     */
    public ViewStudents() {
        initComponents();
         PrintData(); 
    }
    private Connection connectDatabase() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver"); 
        String url = "jdbc:mysql://localhost:3306/student_db?serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false"; 
        String user = "root";
        String password = "root"; 
        return DriverManager.getConnection(url, user, password);
    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(this, "JDBC Driver not found: " + e.getMessage());
        return null;
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database connection failed: " + e.getMessage());
        return null;
    }
}

   
    
    
 void PrintData() {
    Connection c = connectDatabase(); // Use connectDatabase() from this class
    if (c == null) {
        JOptionPane.showMessageDialog(this, "Failed to connect to database.");
        return;
    }

    try {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);  // Clear the table before adding new data

        // Adjusted query to match your 'students' table
        String query = "SELECT * FROM students";  // Correct table name
        PreparedStatement ps = c.prepareStatement(query);
        ResultSet rs = ps.executeQuery();

        // Fetch the data from the 'students' table and populate the JTable
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id"),  // Get the 'id' column as an integer
                rs.getString("name"),  // Get the 'name' column
                rs.getInt("age"),  // Get the 'age' column as an integer
                rs.getString("course")  // Get the 'course' column
            });
        }

        rs.close();
        ps.close();
        c.close();
    } catch (SQLException ex) {
        Logger.getLogger(ViewStudents.class.getName()).log(Level.SEVERE, "Error loading data", ex);
    }
}



   


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Student Data");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Course"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Update.setText("Update Student");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setText("Delete Student");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Update, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
         int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to update.");
            return;
        }

        int id = (int) jTable1.getValueAt(selectedRow, 0);
        String newName = JOptionPane.showInputDialog(this, "Enter new name:", jTable1.getValueAt(selectedRow, 1));
        String newAge = JOptionPane.showInputDialog(this, "Enter new age:", jTable1.getValueAt(selectedRow, 2));
        String newCourse = JOptionPane.showInputDialog(this, "Enter new course:", jTable1.getValueAt(selectedRow, 3));

        if (newName != null && newAge != null && newCourse != null) {
            try {
                Connection c = connectDatabase();
                String query = "UPDATE students SET name = ?, age = ?, course = ? WHERE id = ?";
                PreparedStatement ps = c.prepareStatement(query);
                ps.setString(1, newName);
                ps.setInt(2, Integer.parseInt(newAge));
                ps.setString(3, newCourse);
                ps.setInt(4, id);
                ps.executeUpdate();

                ps.close();
                c.close();

                JOptionPane.showMessageDialog(this, "Student updated successfully.");
                PrintData();
            } catch (SQLException ex) {
                Logger.getLogger(ViewStudents.class.getName()).log(Level.SEVERE, "Error updating student", ex);
            }
        }
        
    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
         int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete.");
            return;
        }

        int id = (int) jTable1.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this student?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Connection c = connectDatabase();
                String query = "DELETE FROM students WHERE id = ?";
                PreparedStatement ps = c.prepareStatement(query);
                ps.setInt(1, id);
                ps.executeUpdate();

                ps.close();
                c.close();

                JOptionPane.showMessageDialog(this, "Student deleted successfully.");
                PrintData();
            } catch (SQLException ex) {
                Logger.getLogger(ViewStudents.class.getName()).log(Level.SEVERE, "Error deleting student", ex);
            }
        }
        
    }//GEN-LAST:event_DeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewStudents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Delete;
    private javax.swing.JButton Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
